<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Vida del personaje, la resteamos cuando no esté pasando a la segunda fase de un boss
//if(room != Room_FinalBoss3)
    global.vida = 3;

///Initialize Variables
grav = 1;         //gravity se usa para funciones
hsp = 0;            //velocidad horizontal
vsp = 0;            //velocidad vertical
jumpspeed = 13;     //velocida de salto
jumpFrames = 0;
jumpMaxFrames = 6;
movespeed = 6;      //velocidad de movimiento
actual_speed = 0;   //Variable para aceleración
disparo = 0;
nivel = room_get_name (room);
status_knockback = false;   //Declaramos knockback
invincible = false;         //Separamos invecibilidad del knockback
knockback_distance = 5;
knockback_duration = 30;
status_dead = 0;
status_locked = false;
complete_death = 0;
status_sliding = false; //El personahe se desliza
gamepad_set_axis_deadzone(0,0.7)
//Para los suckers
suckers_sucking = 0;

//Entrando al agua
//if(place_meeting(x,y,Agua))
if(room == Nivel_Playa1 || room == Nivel_Playa2 || room == Room_FinalBoss2)
{
    grav = 0.2; 
    jumpspeed = 8;
    movespeed = 4.5;
}

//Para utilizar la skin seleccionada
switch(global.skin){
    //Estándar
    case 0:
        idle = spr_idle;
        run = spr_run;
        jump = spr_jump;
        fall = spr_fall;
        shoot = spr_shoot;
        jumpshoot = spr_jumpshoot;
        death = spr_death;
        total_death = spr_total_death;
        enter = spr_enter;
        swim = spr_swim;
    break;
    //Quemado
    case 1:
        idle = spr_idle1;
        run = spr_run1;
        jump = spr_jump1;
        fall = spr_fall1;
        shoot = spr_shoot1;
        jumpshoot = spr_jumpshoot1;
        death = spr_death1;
        total_death = spr_total_death1;
        enter = spr_enter1;
        swim = spr_swim1;
    break;
    //Con capa
    case 2:
        idle = spr_idle2;
        run = spr_run2;
        jump = spr_jump2;
        fall = spr_fall2;
        shoot = spr_shoot2;
        jumpshoot = spr_jumpshoot2;
        death = spr_death2;
        total_death = spr_total_death2;
        enter = spr_enter2;
        swim = spr_swim2;
    break;
    //Con hoja
    case 3:
        idle = spr_idle3;
        run = spr_run3;
        jump = spr_jump3;
        fall = spr_fall3;
        shoot = spr_shoot3;
        jumpshoot = spr_jumpshoot3;
        death = spr_death3;
        total_death = spr_total_death3;
        enter = spr_enter3;
        swim = spr_swim3;
    break;
    //Muñeco nieve
    case 4:
        idle = spr_idle4;
        run = spr_run4;
        jump = spr_jump4;
        fall = spr_fall4;
        shoot = spr_shoot4;
        jumpshoot = spr_jumpshoot4;
        death = spr_death4;
        total_death = spr_total_death4;
        enter = spr_enter4;
        swim = spr_swim4;
    break;
    //Robot, o algo parecido
    case 5:
        idle = spr_idle5;
        run = spr_run5;
        jump = spr_jump5;
        fall = spr_fall5;
        shoot = spr_shoot5;
        jumpshoot = spr_jumpshoot5;
        death = spr_death5;
        total_death = spr_total_death5;
        enter = spr_enter5;
        swim = spr_swim5;
    break;
    //Con dorado
    case 6:
        idle = spr_idle6;
        run = spr_run6;
        jump = spr_jump6;
        fall = spr_fall6;
        shoot = spr_shoot6;
        jumpshoot = spr_jumpshoot6;
        death = spr_death6;
        total_death = spr_total_death6;
        enter = spr_enter6;
        swim = spr_swim6;
    break;
    //Con túnica
    case 7:
        idle = spr_idle7;
        run = spr_run7;
        jump = spr_jump7;
        fall = spr_fall7;
        shoot = spr_shoot7;
        jumpshoot = spr_jumpshoot7;
        death = spr_death7;
        total_death = spr_total_death7;
        enter = spr_enter7;
        swim = spr_swim7;
    break;
}
//Create a object for the hat
if(global.hat != 0)
    hat = instance_create(x, y, obj_hat);
//Para utilizar el gorro seleccionada
switch(global.hat){
    //Llamas
    case 1:
        hat_idle_left = spr_hat_idle1_left;
        hat_idle_right = spr_hat_idle1_right;
        hat_jump_left = spr_hat_jump1_left;
        hat_jump_right = spr_hat_jump1_right;
        hat_run_left = spr_hat_run1_left;
        hat_run_right = spr_hat_run1_right;
        hat_fall_left = spr_hat_fall1_left;
        hat_fall_right = spr_hat_fall1_right;
        hat_shoot_left = spr_hat_shoot1_left;
        hat_shoot_right = spr_hat_shoot1_right;
        hat_swim_left = spr_hat_swim1_left;
        hat_swim_right = spr_hat_swim1_right;
        hat_lone = spr_hat1;
    break;
    //Crema
    case 2:
        hat_idle_left = spr_hat_idle2_left;
        hat_idle_right = spr_hat_idle2_right;
        hat_jump_left = spr_hat_jump2_left;
        hat_jump_right = spr_hat_jump2_right;
        hat_run_left = spr_hat_run2_left;
        hat_run_right = spr_hat_run2_right;
        hat_fall_left = spr_hat_fall2_left;
        hat_fall_right = spr_hat_fall2_right;
        hat_shoot_left = spr_hat_shoot2_left;
        hat_shoot_right = spr_hat_shoot2_right;
        hat_swim_left = spr_hat_swim2_left;
        hat_swim_right = spr_hat_swim2_right;
        hat_lone = spr_hat2;
    break;
    //Sombrilla
    case 3:
        hat_idle_left = spr_hat_idle3_left;
        hat_idle_right = spr_hat_idle3_right;
        hat_jump_left = spr_hat_jump3_left;
        hat_jump_right = spr_hat_jump3_right;
        hat_run_left = spr_hat_run3_left;
        hat_run_right = spr_hat_run3_right;
        hat_fall_left = spr_hat_fall3_left;
        hat_fall_right = spr_hat_fall3_right;
        hat_shoot_left = spr_hat_shoot3_left;
        hat_shoot_right = spr_hat_shoot3_right;
        hat_swim_left = spr_hat_swim3_left;
        hat_swim_right = spr_hat_swim3_right;
        hat_lone = spr_hat3;
    break;
    //Navidad
    case 4:
        hat_idle_left = spr_hat_idle4_left;
        hat_idle_right = spr_hat_idle4_right;
        hat_jump_left = spr_hat_jump4_left;
        hat_jump_right = spr_hat_jump4_right;
        hat_run_left = spr_hat_run4_left;
        hat_run_right = spr_hat_run4_right;
        hat_fall_left = spr_hat_fall4_left;
        hat_fall_right = spr_hat_fall4_right;
        hat_shoot_left = spr_hat_shoot4_left;
        hat_shoot_right = spr_hat_shoot4_right;
        hat_swim_left = spr_hat_swim4_left;
        hat_swim_right = spr_hat_swim4_right;
        hat_lone = spr_hat4;
    break;
    //Ciborg
    case 5:
        hat_idle_left = spr_hat_idle5_left;
        hat_idle_right = spr_hat_idle5_right;
        hat_jump_left = spr_hat_jump5_left;
        hat_jump_right = spr_hat_jump5_right;
        hat_run_left = spr_hat_run5_left;
        hat_run_right = spr_hat_run5_right;
        hat_fall_left = spr_hat_fall5_left;
        hat_fall_right = spr_hat_fall5_right;
        hat_shoot_left = spr_hat_shoot5_left;
        hat_shoot_right = spr_hat_shoot5_right;
        hat_swim_left = spr_hat_swim5_left;
        hat_swim_right = spr_hat_swim5_right;
        hat_lone = spr_hat5;
        //Propios de este
        hat_enter = spr_hat5_enter;
        hat_death = spr_hat5_death;
    break;
    default:
        global.hat = 0;
    break;
}
//Seteamos cronómetro
reloj = global.counter;
alarm[1]=30;
cronometro = 0;
switch (nivel)
{
    case "Nivel_1": {
        cronometro = 1;
        break;
    }
    
    case "Nivel_Playa": {
        cronometro = 2;
        break;
    }
    
    case "Nivel_Bosque": {
        cronometro = 3;
        break;
    }
    case "Nivel_Nieve": {
        cronometro = 4;
        break;
    }
    case "Final_Level": {
        cronometro = 5;
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Pantalla de game over
//if(status_dead == 1 &amp;&amp; !sound_isplaying(snd_die))
instance_create(view_xview, view_yview, obj_gameoverimg);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Alarm for unlocked if locked (cancel the geiser effect)
speed = 0;
status_locked = false;
grav = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Deshacemos el knockback (para el agua)
status_knockback = false;

//Deshacemos la invencibilidad
invincible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>reloj += 1;
alarm[1] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>disparo</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the players input
//key_right = keyboard_check(ord("D"));   //Alternativa para las letras
key_right = keyboard_check(vk_right) || (gamepad_axis_value(0,gp_axislh) &gt; 0) || (gamepad_button_check(0,gp_padr) || joystick_xpos(2) &gt; 0.2);   //Para detectar la flecha derecha
key_left = -(keyboard_check(vk_left) || (gamepad_axis_value(0,gp_axislh) &lt; 0) || (gamepad_button_check(0,gp_padl) || joystick_xpos(2) &lt; -0.2));     //Para detectar la flecha izquierda
key_jump = keyboard_check_pressed(vk_space) || (gamepad_button_check_pressed(0,gp_face1) || joystick_check_button(2, 3));
key_jump_held = keyboard_check(vk_space) || (gamepad_button_check(0,gp_face1) || joystick_check_button(2, 3));
key_down = keyboard_check(vk_down) || (gamepad_axis_value(0,gp_axislv) &gt; 0) || (gamepad_button_check(0,gp_padd) || joystick_ypos(2) &gt; 0.2);

//React to imputs
if(status_knockback == true) 
    move = move;      //Si esta con el nockback no usamos las teclas horizontales
else if(status_dead == 1 || status_locked == true)
    move = 0;
else 
    move = key_left + key_right;        //Aplicamos los valores de las teclas de dirección
//Acelaración
if(move != 0 &amp;&amp; abs(actual_speed) &lt;= movespeed &amp;&amp; 
    (disparo == 0 || !place_meeting(x, y + 1, obj_solid_terrain))) 
    actual_speed += 1;
else if(actual_speed != 0)  
    actual_speed -= 1;
//Movimiento con la aceleración actual
if (status_sliding == false){
    hsp = move * actual_speed;
}
else //En el hielo
    hsp = movespeed * 2.5 * image_xscale;
//Aplicamos gravedad
if(vsp &lt; 10){
    //Hacemos aquí comprobación para vacios en el agua
    if(place_meeting(x, y, Agua)){
        terrainId = collision_line(x, y, x, y + 480, obj_solid_terrain, true, false);
        if(terrainId == noone){
            grav = 0.2 +(2 * ((480 - distance_to_point(x, 480)) / 480));
        }
        else{
            grav = 0.2;
        }
    }
    //Y aplicamos
    vsp += grav;
}       
//Salto
if((
    place_meeting(x,y+1,obj_solid_terrain) ||
    (place_meeting(x,y+1,obj_suelo_hojas) &amp;&amp; !place_meeting(x, y, obj_suelo_hojas)) ||
    place_meeting(x,y,Agua)      ||       //Comprobamos que este en el agua
    place_meeting(x,y+1,obj_mobile_platformH) ||
    place_meeting(x,y+1,obj_mobile_platformV)
    ) 
    &amp;&amp; key_jump &gt; 0                         //Y que el boton de salto esté pulsado
    &amp;&amp; status_dead = 0
    &amp;&amp; status_locked = false)
{
    vsp = -jumpspeed/jumpMaxFrames;
    jumpFrames = 1;
    if(global.SOUNDS == 1)
        audio_play_sound(snd_jump, 1, false);
    //Altura de salto variable
    /*if(vsp &lt; 0 &amp;&amp; !key_jump_held) 
        vsp = max(vsp, vsp/4);
        //vsp = max(vsp, -jumpspeed/4);*/
}
//Salto variable alternativo
if(jumpFrames &lt; jumpMaxFrames &amp;&amp; vsp &lt; 0 &amp;&amp; key_jump_held == true){
    vsp -= jumpspeed/jumpMaxFrames + grav;  //Para compensar la gravedad
    jumpFrames ++;
}

//Desplazamos al personaje (controlando colisiones)
//Comprobamos suelo hielo
if(place_meeting(x,y+1,obj_hielo))
{
    //Character speed during the slide
    status_sliding = true;    
}
else 
    status_sliding = false

//Comporbación de succionadores en los lados (Boss 2)
if(room == Room_FinalBoss2){
    terrainIdL = collision_line(x, y, x - 600, y, obj_suelo_marnopisable, true, false);
    terrainIdR = collision_line(x, y, x + 600, y, obj_suelo_marnopisable, true, false);
    //Hacemos que no aplique cambio si el prota no está en el lado que corresponde
    if(terrainIdL == noone &amp;&amp; x &lt; 624){
        hsp -= 3 * (300 - distance_to_point(624-300, y)) / 300;
    }
    if(terrainIdR == noone &amp;&amp; x &gt; 624){
        hsp += 3 * (300 - distance_to_point(624+300, y)) / 300;
    }
}
    
//Horizontal collision (Terreno sólido)
if(place_meeting(x+hsp,y,obj_solid_terrain))
{
    while(!place_meeting(x+sign(hsp), y,obj_solid_terrain))
    {
        x+=sign(hsp);
    }
    hsp=0;
}
//Aplicamos cambios en x
x += hsp;
//hspeed = hsp;

//Control para no salir por los lados
x = clamp(x, 15, room_width-15);

//Vertical collision
if(place_meeting(x,y+vsp,obj_solid_terrain))
{
  
    while(!place_meeting(x,y+sign(vsp),obj_solid_terrain))
    {
        y+=sign(vsp);
    }
    vsp = 0;
    status_knockback = false;
}
//Comprobación aparte para suelo atravesable
if(place_meeting(x,y+vsp,obj_suelo_hojas) &amp;&amp; 
!place_meeting(x,y,obj_suelo_hojas) &amp;&amp;
vsp &gt;= 0 &amp;&amp; key_down = 0)
{ 
    while(!place_meeting(x, y+sign(vsp), obj_suelo_hojas))
    {
        y+=sign(vsp);
    }
    vsp = 0;
    status_knockback = false;
}
//Hacemos que descienda con lo sacado de las colisiones del suelo/techo
y += vsp;
//vspeed = vsp;
//Giro
if (move != 0 &amp;&amp; 
    /*status_sliding = false &amp;&amp; */
    status_knockback == false){ //Lo cambiamos para que gire auqneu disapre
    image_xscale = move;
}
//Disparo en codigo
if keyboard_check(ord('C')) || (gamepad_button_check(0,gp_face2)  || joystick_check_button(2, 2))  {
    if(disparo = 0 &amp;&amp; status_dead = 0) {
        if(global.SOUNDS == 1)
            audio_play_sound(snd_shoot, 1, false);
        proyectil = instance_create(x,y+3,obj_cacota);
        proyectil.speed = 15;
        proyectil.direction = 90-(90*image_xscale);
        proyectil.image_xscale = image_xscale;
        disparo = 1;
        //No se detiene si está en el aire
        if(place_meeting(x, y + 1, obj_solid_terrain))
            actual_speed = 0;
        alarm[0] = 15;
    }
}
//Animaciones (ahora al gorro también)
//if(vsp == 0)
if(place_meeting(x, y + 1, obj_solid_terrain) || 
    (place_meeting(x, y + 1, obj_suelo_hojas) &amp;&amp; !place_meeting(x, y, obj_suelo_hojas)))
{
    if(status_dead = 1 &amp;&amp; complete_death == 0) {
        sprite_index = death;
        if(image_index = image_number - 1) {
            sprite_index = total_death;
            complete_death = 1;
        }
    } 
    else if (complete_death == 0){    
        if(hsp != 0){
            sprite_index = run;
            if(instance_exists(obj_hat))
                hat.sprite_index = hat_run_right;
        }
        else 
        {
            if(disparo &gt; 0){
                sprite_index = shoot;
                if(instance_exists(obj_hat))
                    hat.sprite_index = hat_shoot_right;
            }
            else if (place_meeting(x, y, obj_portal)){
                sprite_index = enter;
                if(obj_fade.fadeIn = true)
                    image_index = 0;
            }
            else{
                sprite_index = idle;
                if(instance_exists(obj_hat))
                    hat.sprite_index = hat_idle_right;
            }
        }
    }
}
else
{
    if (disparo &gt; 0){
        sprite_index = jumpshoot;
        if(instance_exists(obj_hat))
            hat.sprite_index = hat_jump_right;
    }
    else if (place_meeting(x, y, Agua)){
        sprite_index = swim;
        if(instance_exists(obj_hat))
            hat.sprite_index = hat_swim_right;
    }
    else if (vsp &lt; 0){
        sprite_index = jump;
        if(instance_exists(obj_hat))
            hat.sprite_index = hat_jump_right;
    }
    else if (vsp &gt; 0){
        sprite_index = fall;
        if(instance_exists(obj_hat))
            hat.sprite_index = hat_fall_right;
    }
}
//Control de muerte
if(status_locked == false){
    if (position_meeting (x,y,Lava)) 
        global.vida = 0 ;
    if (position_meeting (x,y,obj_acido)) 
        global.vida = 0;
    //if (place_meeting (x,y,obj_pinchos)) 
        //global.vida = 0;
    if (y &gt; room_height &amp;&amp; status_locked == false) 
        global.vida = 0;
}
//Control de negativos
if (global.vida &lt; 0) 
    global.vida = 0;
//Sonido de muerte
if(global.vida &lt;= 0 &amp;&amp; status_dead == 0)
{
    if(global.SOUNDS == 1)
        audio_play_sound(snd_die, 1, false);
    //Sobrero si hay
    if(instance_exists(obj_hat)){
        with(hat) instance_destroy();
        falling_hat = instance_create(x, y-30, obj_falling_hat);
        falling_hat.sprite_index = hat_lone;
    }
    alarm_set(4, 30);
    status_dead = 1;
}

//Cronoemtros para logros
if ((cronometro = 1) &amp;&amp; (reloj&lt;60) &amp;&amp; (place_meeting(x,y,obj_portal))) {
    ini_open("SystemNM.txt");
    ini_key_delete("NhTPahPmx","rgShhbDRrsEF")
    ini_write_string("NhTPahPmx","rgSHhbDRrsEF","sBedfESFJkm")
    ini_close();
    }
if ((cronometro = 2) &amp;&amp; (reloj&lt;60) &amp;&amp; (place_meeting(x,y,obj_portal))) {
    ini_open("SystemNM.txt");
    ini_key_delete("NhTPahPmx","ygnYRbdETjSa")
    ini_write_string("NhTPahPmx","ygNYRbdETjSa","rdklGUytnfR")
    ini_close();
    }
if ((cronometro = 3) &amp;&amp; (reloj&lt;60) &amp;&amp; (place_meeting(x,y,obj_portal_bosque))) {
    ini_open("SystemNM.txt");
    ini_key_delete("NhTPahPmx","Esyi4nne5NrE")
    ini_write_string("NhTPahPmx","Esyi4Nne5NrE","vhbkybtdRVS")
    ini_close();
    }
if ((cronometro = 4) &amp;&amp; (reloj&lt;60) &amp;&amp; (place_meeting(x,y,obj_portal_nieve))) {
    ini_open("SystemNM.txt");
    ini_key_delete("NhTPahPmx","jrTbDRETSJrN")
    ini_write_string("NhTPahPmx","jrTbDReTSJrN","DRybSETAHNY")
    ini_close();
    }
if ((cronometro = 5) &amp;&amp; (reloj&lt;60) &amp;&amp; (place_meeting(x,y,obj_portal))) {
    ini_open("SystemNM.txt");
    ini_key_delete("NhTPahPmx","YFrBuGdETSYU")
    ini_write_string("NhTPahPmx","YFrBuGdeTSYU","rtwKBTlgjyV")
    ini_close();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_boss_interactor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
/*if(invincible == false &amp;&amp; status_dead == false){
    if(other.attacking == true){
        script_execute(scr_knockback);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_lightball_S2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
if(invincible == false &amp;&amp; status_dead == false){
    if(other.speed &gt; 0){
        script_execute(scr_knockback);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="FinalBoss5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If the boss is not teleporting
if(invincible == false &amp;&amp; status_dead == false){
    if(other.teleporting == false){
        script_execute(scr_knockback);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hazard">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Colision con enemigos
if(invincible == false &amp;&amp; status_dead == 0 &amp;&amp; status_locked == false){            
    script_execute(scr_knockback);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_pinchos">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
global.vida = 0;
other.sprite_index = spr_pinchos_sangre;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Primero dibuja al moñaco, anda
draw_self();


//Pinta el temporizador si esta activado
    //Sería mejor gestionarlo desde otra parte
if(global.TIMER == true){
    draw_set_colour(c_white);
    draw_text(view_xview + 300, view_yview + 30, reloj);
}



//Control de gorro
/*if(global.hat != 0 &amp;&amp; status_dead = 0 &amp;&amp; !place_meeting(x, y, obj_portal)){
    if(image_xscale == 1){
        if(vsp &lt; 0){
            if(!place_meeting(x, y, Agua))
                draw_sprite(hat_jump_right, current_time % (sprite_get_number(hat_jump_right) - 1), x, y);
            else
                draw_sprite(hat_swim_right, current_time % (sprite_get_number(hat_swim_right) - 1), x, y);
        }
        else if(disparo == 1)
            draw_sprite(hat_shoot_right, current_time % (sprite_get_number(hat_shoot_right) - 1), x, y); 
        else if(vsp &gt; 0){
            if(!place_meeting(x, y, Agua))
                draw_sprite(hat_fall_right, current_time % (sprite_get_number(hat_fall_right) - 1), x, y);
            else
                draw_sprite(hat_swim_right, current_time % (sprite_get_number(hat_swim_right) - 1), x, y);
        }
        else if(hsp &gt; 0)
            draw_sprite(hat_run_right, current_time % (sprite_get_number(hat_run_right) - 1), x, y);
        else if(hsp == 0)
            draw_sprite(hat_idle_right, current_time % (sprite_get_number(hat_idle_right) - 1), x, y);
    }
    else{
        if(vsp &lt; 0){
            if(!place_meeting(x, y, Agua))
                draw_sprite(hat_jump_left, delta_time % sprite_get_number(hat_jump_left), x, y);
            else
                draw_sprite(hat_swim_left, delta_time % sprite_get_number(hat_swim_left), x, y);
        }
        else if(disparo == 1)
            draw_sprite(hat_shoot_left, delta_time % sprite_get_number(hat_shoot_left), x, y);
        else if(vsp &gt; 0){
            if(!place_meeting(x, y, Agua))
                draw_sprite(hat_fall_left, delta_time % sprite_get_number(hat_fall_left), x, y);
            else
                draw_sprite(hat_swim_left, delta_time % sprite_get_number(hat_swim_left), x, y);
        }
        else if(hsp &lt; 0)
            draw_sprite(hat_run_left, delta_time % sprite_get_number(hat_run_left), x, y);
        else if(hsp == 0)
            draw_sprite(hat_idle_left, delta_time % sprite_get_number(hat_idle_left), x, y);
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
