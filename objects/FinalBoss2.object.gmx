<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boss2_move</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>spr_boss2_idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize Variables
grav = 2;         //gravity se usa para funciones
jumpspeed = 10;     //velocida de salto
movespeed = 2;      //velocidad de movimiento
global.vidaboss = 20; //Vida del personaje
vida_inicial = global.vidaboss;
looking_left = true;
attack = 0;
vsp = 0;
destroy_terrain = false;
alarm[0] = 60;
/* Estados
0 - Normal
1 - Apuntando
2 - Disparando
3 - Viajando
4 - Desatascando */
status = 0;

//Interactor for attacking animation
interactor = instance_create(x,y,obj_boss_interactor);

//Get the player
player = instance_find(object5, 0);

//Alarma para cuadrar la cámara
alarm_set(1, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
destroy_terrain = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Cuadra la camara
camera = instance_find(obj_camera2, 0);
camera.status = 0;
camera.objectiveX = room_width/2;
camera.objectiveY = room_height/2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
if(status == 0){
    //Controlamos cambio de dirección
    if(x &gt; object5.x) //Comparamos la posición del boss con la del prota
    { 
        looking_left = true;
        image_xscale = 1;
        interactor.image_xscale = 1;
    }
    else if(x &lt; object5.x)
    {
        looking_left = false;
        image_xscale = -1;
        interactor.image_xscale = -1;
    }
    //
    status = 1;
    alarm[0] = 20 - (vida_inicial - global.vidaboss);
}
else if(status == 1){
    anchor = instance_create(x,y,obj_anchor);
    status = 2;
    sprite_index = spr_boss2_idle;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Actitud normal
if(status == 0){
    //Comprobamos posición del prota para el encaramiento
    if(x &lt; instance_position(x, y, object5)) 
        looking_left = true;
    //Movemos el boss si no ataca o dispara
    if (sprite_index = spr_boss2_move || 
        sprite_index = spr_boss2_jump)
    {
        image_angle = point_direction(x, y, object5.x, object5.y);
        if(looking_left = true) image_angle += 180; //Porque se comprueba desde la derecha del sprite
        direction = image_angle;
        speed = -image_xscale;
    }
    interactor.x = x;
    interactor.y = y;
    //Solo si esta en el suelo
    //Atacar
    if ((distance_to_object (object5) &lt; 10)) 
    {
        sprite_index = spr_boss2_attack;
        interactor.attacking = true;
    }
    else //Volver a la normalidad
    {    
        if (sprite_index = spr_boss2_attack &amp;&amp; image_index = 8) 
        {
            interactor.attacking = false;
            if(place_meeting(x, y+1, obj_solid_terrain))
                sprite_index = spr_boss2_move;
            else  
                sprite_index = spr_boss2_jump;
        }
    }
    //Controlamos cambio de dirección
    if(int64(delta_time%5) == 0){
        if(x &gt; object5.x) //Comparamos la posición del boss con la del prota
        { 
            looking_left = true;
            image_xscale = 1;
            interactor.image_xscale = 1;
        }
        else if(x &lt; object5.x)
        {
            looking_left = false;
            image_xscale = -1;
            interactor.image_xscale = -1;
        }
    }
}
//Apuntando para disparar el ancla
if(status = 1){
    speed = 0;
    image_angle = point_direction(x, y, object5.x, object5.y);
    if(looking_left = true) image_angle += 180; //Porque se comprueba desde la derecha del sprite
    direction = image_angle;
    sprite_index = spr_boss2_jump;
}
//Espera mientras avanza el ancla
if(status = 2){
    //No hace nada    
}
//Tira palante
if(status = 3){
    if(looking_left = true) speed = -15;
    else                    speed = 15;
}
//Ajsutarse tras el choque
if(status = 4){
    //
    if(looking_left == false)
        direction += 180;
    image_angle = 0;
    //Lo desatascamos si se atasca (ya no, ahora rompe)
    /*//Comprobación para suelo del fondo (revisar en caso de cambiarlo)
    while(y &gt; room_height - 64 - sprite_height/2)
        y -= 1;
    move_outside_solid(direction,200);*/
    //Destruimos los eslabones que pudieran quedar
    with(obj_chain_link){
        instance_destroy();
    }
    
    //Controlamos cambio de dirección
    if(x &gt; object5.x) //Comparamos la posición del boss con la del prota
    { 
        looking_left = true;
        image_xscale = 1;
        interactor.image_xscale = 1;
    }
    else if(x &lt; object5.x)
    {
        looking_left = false;
        image_xscale = -1;
        interactor.image_xscale = -1;
    }
    //Destruimos el terreno que tque
    destroy_terrain = true;
    alarm_set(2, 1);
    //Volvemos al estado inicial
    status = 0;
}
//Pisotón
if(status == 5){
    vspeed = 10;
    if(place_meeting(x, y + vspeed, obj_solid_terrain)){
        while(place_meeting(x, y + vspeed, obj_solid_terrain)){
            vspeed --;
        }
        obj_camera2.status = 3;
        obj_camera2.alarm[0] = 10;
        obj_camera2.alarm[1] = 5;
        obj_camera2.tremble_axis = 2;
        rock_position = irandom_range(2, 17) * 32;
        falling_rock = instance_create(rock_position, 0, obj_falling_rock);
        status = 0;
    }
}
//Cae al vacío cuando "muere"
if(status == 6){
    with(obj_chain_link) instance_destroy();
    with(obj_anchor) instance_destroy();
    direction = 0;
    speed = 0;
    vspeed = 15;
    if(y &gt; 1000){
        instance_create(room_width/2, room_height + 200, obj_anchor_event);
        player.status_locked = true;
        status = 7;
    }
}
//Esperar que se cierre la escena
if(status == 7){
    //Nada de momento
}
//Matar al rpota si llega a los bordes
if( object5.x &lt; object5.sprite_width/2 || 
    object5.x &gt; room_width - sprite_width/2 || 
    object5.y &lt; sprite_height/2)
    global.vida = 0;
    
//Morir del todo
/*if (global.vidaboss == 0)
{ 
    ini_open("SystemNM.txt")
    ini_key_delete("NhTPahPmx","KSgfhsRKWenv")
    ini_write_string("NhTPahPmx","KSgfhSRKWenv","njsESnsSAnQ")
    ini_close()
    with(obj_chain_link) instance_destroy();
    with(obj_anchor) instance_destroy();
    global.muertes += 1;
    obj_fade.fadeIn = false;
    obj_fade.alarm[1] = room_speed * 0.05;
    instance_destroy();  
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_cacota">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Recibir ataque
global.vidaboss -= 1;
with(other)
    instance_destroy();
    
//Control de muerte
if(global.vidaboss &lt;= 0)
    status = 6;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_suelo_marnopisable">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
if(destroy_terrain == true){
    with(other) instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
