<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boss2_move</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_boss2_idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize Variables
grav = 2;         //gravity se usa para funciones
jumpspeed = 10;     //velocida de salto
movespeed = 1;      //velocidad de movimiento
global.vidaboss = 10; //Vida del personaje
looking_left = true;
attack = 0;
vsp = 0;
alarm[0] = 90;
/* Estados
0 - Normal
1 - Apuntando
2 - Disparando
3 - Viajando
4 - Desatascando */
status = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(status = 0){
    status = 1;
    alarm[0] = 30;
}
else if(status = 1){
    anchor = instance_create(x,y,obj_anchor);
    status = 2;
    sprite_index = spr_boss2_idle;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Actitud normal
if(status = 0){
    //Gravedad
    if(vsp &lt; 10) vsp += grav;
    if(place_meeting(x,y+vsp, obj_arena))
    {
        while(!place_meeting(x, y+sign(vsp), obj_arena))
        {
            y+=sign(vsp);
        }
        vsp=0;
    }
    y += vsp;
    //Salto
    if(y &gt; object5.y){
        if(random(60) &lt;= 10)
        { 
            vsp = -jumpspeed;
        }
    }
    //Controlamos cambio de dirección
    if(x &gt; object5.x) //Comparamos la posición del boss con la del prota
    { 
        looking_left = true;
        image_xscale = 1;
        //change = true;
    }
    if(x &lt; object5.x)
    {
        looking_left = false;
        image_xscale = -1;
    }
    //Comprobamos posición del prota para el encaramiento
    if(x &lt; instance_position(x, y, object5)) looking_left = true;
    //Movemos el boss si no ataca o dispara
    if (sprite_index = spr_boss2_move || 
        sprite_index = spr_boss2_jump)
    {
        if(looking_left = true &amp;&amp; !place_meeting(x-1, y, obj_arena)) x-=movespeed;
        else if (looking_left = false &amp;&amp; !place_meeting(x+1, y, obj_arena)) x+=movespeed;
    }
    //Solo si esta en el suelo
    //Atacar
    if ((distance_to_object (object5) &lt; 10)) 
    {
        sprite_index = spr_boss2_attack
    }
    else //Volver a la normalidad
    {    
        if (sprite_index = spr_boss2_attack &amp;&amp; image_index = 8) 
        {
            if(place_meeting(x, y+1, obj_arena))
                sprite_index = spr_boss2_move;
            else  
                sprite_index = spr_boss2_jump;
        }
    }
}
//Apuntando para disparar el ancla
if(status = 1){
    image_angle = point_direction(x, y, object5.x, object5.y);
    if(looking_left = true) image_angle += 180; //Porque se comprueba desde la derecha del sprite
    direction = image_angle;
    sprite_index = spr_boss2_jump;
}
if(status = 2){
    //No hace nada    
}
if(status = 3){
    if(looking_left = true) speed = -10;
    else                    speed = 10;
}
if(status = 4){
    //Lo desatascamos si se atasca
    if(place_meeting(x,y+1,obj_arena)){
        while(place_meeting(x,y,obj_arena)){
            y-=1;
        }
    }
    else if(place_meeting(x,y-1,obj_arena)){
        while(place_meeting(x,y,obj_arena)){
            y+=1;
        }
    }    
    /*if(x &gt; 0 || x &lt; 600 || y &lt; 0 || y &gt; 480){
        x = 300;
        y = 240;
    }*/
    status = 0;
}
//Recibir ataque
if (place_meeting (x,y, obj_cacota)) {
    global.vidaboss -=1;
    instance_deactivate_object(obj_cacota);
}
//Morir del todo
if (global.vidaboss = 0)
{ 
    global.muertes += 1;
    obj_fade.fadeIn = false;
    obj_fade.alarm[1] = room_speed * 0.05;
    instance_destroy();   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
