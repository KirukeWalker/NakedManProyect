<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_melee</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>looking_right = true;   //Varaible para determinar a donde mira
direction_facing = 1;
status_dead = 0;        //Variable para comprobar muerte
status_jumping = false;
status_charguing = false;
originX = 0;
grav = 2;
vsp = 0;
hsp = 2;
jump_speed = 30;
apply_gravity = true;
pasa_por_aqui = false;

disparando = spr_melee_attack;  //Variable para guardar la animación de atacar
muerte = spr_melee_death;       //Variable para guardar la animación de morir
moverse = spr_melee;            //Variable para guardar la animación de moverse

nivel = room_get_name (room);
switch (nivel)
{
    case "Nivel_Playa1": 
    {
        disparando = spr_melee_attack2;
        muerte = spr_melee_death2;
        moverse = spr_melee2;
        cargando = spr_charguing2;
        volando = spr_flying2;
        levantando = spr_rising2;
        break;
    }    
    case "Nivel_Playa2": 
    {
        disparando = spr_melee_attack2;
        muerte = spr_melee_death2;
        moverse = spr_melee2;
        cargando = spr_charguing2;
        volando = spr_flying2;
        levantando = spr_rising2;
        break;
    } 
    case "Nivel_Bosque":
    {
        disparando = spr_melee_attack3;
        muerte = spr_melee_death3;
        moverse = spr_melee3;
        break;
    }
   case "Nivel_Nieve": 
    {
        disparando = spr_melee_attack4;
        muerte = spr_melee_death4;
        moverse = spr_melee4;
        break;
    }  
    case "Final_Level": 
    {
        disparando = spr_melee_attack5;
        muerte = spr_melee_death4;      //Falta la chupa muriéndose
        moverse = spr_melee5;
        break;
    }  
}
//Se la asignamos antes de empezar
sprite_index = moverse;
//Cogemos el ancho de la skin
skin_width = sprite_width;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Control de encaramiento
image_xscale = direction_facing;

//Comportamiento bajo el agua
if(place_meeting(x, y, Agua) &amp;&amp; status_charguing = false){
    nakedId = collision_line(x-250, y, x+250, y, object5, false, true);;
    if(nakedId != noone){
        status_charguing = true;
        direction_facing = sign(nakedId.x - x);
    }
}

//Gravedad
if(vsp &lt; 10 &amp;&amp; apply_gravity == true) 
    vsp += grav;
if(place_meeting(x,y+vsp, obj_solid_terrain) ||
    place_meeting(x,y+vsp, obj_suelo_hojas) 
    )
{
    while(!place_meeting(x, y+sign(vsp), obj_solid_terrain) &amp;&amp;
            !place_meeting(x, y+sign(vsp), obj_suelo_hojas))
    {
        y+=sign(vsp);
    }
     if(vsp &gt; 0) status_jumping = false;
    vsp=0;   
}
y += vsp;
//Controlamos cambio de dirección
//Con las paredes
if(place_meeting(x+(hsp*direction_facing), y, obj_solid_terrain) ||
    place_meeting(x+(hsp*direction_facing), y, obj_suelo_hojas))
{ 
    direction_facing *= -1;
}
//Con los vacios
if(!place_meeting(x+(skin_width*direction_facing), y+1, obj_solid_terrain) &amp;&amp; 
    !place_meeting(x+(skin_width*direction_facing), y+1, obj_suelo_hojas) &amp;&amp;
    status_jumping == false &amp;&amp; status_charguing == false)
    direction_facing *= -1;
//Movemos el mantel si no ataca
if (sprite_index == moverse)
{
    if(status_jumping = true) hsp = 4;
    else hsp = 2;
    x += hsp * direction_facing;
}
//Recibir ataque
/*if (place_meeting(x, y, obj_cacota) &amp;&amp; status_dead == 0)
{ 
    global.muertes += 1;
    sprite_index = muerte;
    status_dead = 1;
    instance_deactivate_object(obj_cacota);
}
//Morir del todo
sprite_length = sprite_get_number(muerte);
if(image_index = sprite_length-1 &amp;&amp; status_dead = 1) 
    instance_destroy();*/
//Si no está bajo el agua
if(!place_meeting(x, y, Agua)){
    //Atacar
    if ((distance_to_object (object5) &lt; 30 &amp;&amp; object5.status_dead = 0) 
        &amp;&amp; status_dead = 0) 
    {
        sprite_index = disparando;
    }
    //Volver a la normalidad
    if (sprite_index = disparando &amp;&amp; image_index = image_number - 1) 
        sprite_index = moverse;
}
if(status_charguing == true){ //Si lo está hará el ataque rasante
    //Primero pasar animación a la de carga
    if(sprite_index == moverse){
        sprite_index = cargando;
        image_index = 0;
        apply_gravity = false;
    }
    else if(sprite_index == cargando &amp;&amp; hspeed == 0){
        //image_number += 1;
        if(image_index &gt;= image_number - 1){
            hspeed = 10 * direction_facing;
            distance_to_do = 320;
            originX = x;
            sprite_index = volando;
        }
    }
    else if(sprite_index == volando){
        if(place_meeting(x + hspeed, y, obj_solid_terrain) ||
            abs(x - originX) &gt;= distance_to_do){
            hspeed = 0;
            //status_charguing = false;
            sprite_index = levantando;
            //pasa_por_aqui = true;
            apply_gravity = true;
        }
    }
    else{
        if(image_index &gt;= image_number - 1){
            sprite_index = moverse;
            status_charguing = false;
        }
    }
}

//Detectar al prota para saltar (a partir del cuarto nivel)
if (nivel = "Nivel_Nieve" || nivel = "Final_Level" || nivel = "god_room_2"){
    if(distance_to_object(object5) &lt;= 150 &amp;&amp;
        (place_meeting(x, y+1, Terreno) || place_meeting(x,y+1,obj_suelo_hojas)) &amp;&amp; 
        status_dead = 0 &amp;&amp; 
        object5.status_dead = 0) 
    {
        if(x &lt; object5.x) direction_facing = +1;
        else direction_facing = -1;
        vsp -= jump_speed;
        status_jumping = true;
        //Aqui pondremos el cambio de sprite
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Control stuff
//draw_text(30, 30, hspeed);
//draw_text(30, 50, pasa_por_aqui);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Normalmente dibujete tal cual
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
